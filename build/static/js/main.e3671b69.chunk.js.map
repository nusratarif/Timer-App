{"version":3,"sources":["Helper/Timer.ts","Components/Controls/Controls.tsx","Components/Main/Main.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateTimer","timeInSeconds","hours","Math","floor","minutes","seconds","Controls","props","setTimeInSeconds","useState","intervalId","setIntervalId","className","onClick","interval","setInterval","previousState","clearInterval","Main","timerArray","setTimerArray","useEffect","timeArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAgBeA,MAhBf,SAAwBC,GACpB,IAAIC,EAAgBC,KAAKC,MAAMH,EAAgB,MAC3CI,EAAkBF,KAAKC,OAAOH,EAAyB,KAARC,GAAiB,IAChEI,EAAkBL,EAAyB,KAARC,EAA2B,GAAVG,EAMxD,MAAO,CAJWH,EAAQ,GAAR,WAAiBA,GAAUA,EACzBG,EAAU,GAAV,WAAmBA,GAAYA,EAC/BC,EAAU,GAAV,WAAmBA,GAAYA,I,MC4BxCC,MA7Bf,SAAkBC,GAAc,IACpBC,EAAqBD,EAArBC,iBADmB,EAESC,mBAAiB,GAF1B,mBAEpBC,EAFoB,KAERC,EAFQ,KAoB1B,OACI,0BAASC,UAAU,qBAAnB,UACE,wBAAQC,QAlBU,WACtB,IAAIC,EAAeC,aAAY,WAC1BP,GAAiB,SAACQ,GAAD,OAA0BA,EAAgB,OAC5D,KACHL,EAAcG,IAcX,kBACA,wBAAQD,QAZU,WACnBI,cAAcP,IAWb,kBACA,wBAAQG,QATW,WACpBI,cAAcP,GACdF,EAAiB,IAOhB,uBCFIU,MAvBf,WAAiB,IAAD,EAC8BT,mBAAiB,GAD/C,mBACLT,EADK,KACUQ,EADV,OAEwBC,mBAA+B,IAFvD,mBAELU,EAFK,KAEOC,EAFP,KAQZ,OAJAC,qBAAU,WACN,IAAIC,EAAoCvB,EAAeC,GACvDoB,EAAcE,KACf,CAACtB,IAED,iCAEG,0BAASY,UAAU,kBAAnB,UACE,mBAAGA,UAAU,aAAb,SAA2BO,EAAW,KACtC,qCACA,mBAAGP,UAAU,aAAb,SAA2BO,EAAW,KACtC,qCACA,mBAAGP,UAAU,aAAb,SAA2BO,EAAW,QAE1C,cAAC,EAAD,CAAUX,iBAAkBA,QCTrBe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e3671b69.chunk.js","sourcesContent":["function calculateTimer(timeInSeconds : number): Array<number | string> {\n    let hours: number = Math.floor(timeInSeconds / 3600);\n    let minutes: number = Math.floor((timeInSeconds - (hours * 3600)) / 60);\n    let seconds: number = timeInSeconds - (hours * 3600) - (minutes * 60);\n\n    let hoursFormat = hours < 10 ? `0${hours}` : hours;\n    let minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\n\n    return [\n        hoursFormat,\n        minutesFormat,\n        secondsFormat\n    ];\n}\n\nexport default calculateTimer;","import React, { useState } from 'react'\nimport './Controls.css';\ntype Props = {\n    setTimeInSeconds: Function\n};\n\nfunction Controls(props:Props) {\n    const { setTimeInSeconds } = props;\n    const [intervalId, setIntervalId] = useState<number>(0);\n\n    const handlePlayButton = () => {\n       let interval:any = setInterval(() => {\n            setTimeInSeconds((previousState:number) => previousState + 1);\n        }, 1000);\n        setIntervalId(interval);\n    }\n\n    const handleStopButton = () => {\n          clearInterval(intervalId);\n    }\n\n    const handleResetButton = () => {\n          clearInterval(intervalId);\n          setTimeInSeconds(0);\n    }\n\n     return (\n         <section className=\"controls-container\">\n           <button onClick={handlePlayButton}>Play</button>\n           <button onClick={handleStopButton}>Stop</button>\n           <button onClick={handleResetButton}>Reset</button>\n         </section>\n     )\n}\n\nexport default Controls;","import React, { useEffect, useState } from 'react';\nimport './Main.css';\nimport calculateTimer from '../../Helper/Timer';\nimport Controls from '../Controls/Controls';\n\nfunction Main (){\n    const [timeInSeconds, setTimeInSeconds] = useState<number>(0);\n    const [timerArray, setTimerArray] = useState<Array<number|string>>([]);\n\n    useEffect(() => {\n        let timeArray: Array<number | string> = calculateTimer(timeInSeconds);\n        setTimerArray(timeArray);\n    }, [timeInSeconds]);\n    return (\n       <main>\n         \n          <section className=\"timer-container\">\n            <p className=\"timer-text\">{timerArray[0]}</p>\n            <span>:</span>\n            <p className=\"timer-text\">{timerArray[1]}</p>\n            <span>:</span>\n            <p className=\"timer-text\">{timerArray[2]}</p>\n          </section>\n        <Controls setTimeInSeconds={setTimeInSeconds}  />\n      </main>\n    )\n}\n\nexport default Main;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Components/Main/Main'\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}